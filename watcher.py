# watcher.py ‚Äì s·ª≠ d·ª•ng facebook-scraper ƒë·ªÉ ph√°t hi·ªán post ch·ª©a video
import os
import time
import subprocess
from datetime import datetime
from facebook_scraper import get_posts

# === C·∫•u h√¨nh ===
PAGES_FILE = "pages.txt"                    # Danh s√°ch fanpage c·∫ßn theo d√µi
PROCESSED_FILE = "logs/processed_ids.txt"    # Ghi l·∫°i post_id ƒë√£ x·ª≠ l√Ω
HISTORY_LOG = "logs/history.log"              # Log ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
ERROR_LOG = "logs/error.log"                  # Log l·ªói
COOKIE_FILE = "cookies.txt"                   # Cookie Facebook
CHECK_INTERVAL = 60  # seconds                # Chu k·ª≥ ki·ªÉm tra

# === T·∫°o th∆∞ m·ª•c/log n·∫øu ch∆∞a c√≥ ===
os.makedirs("logs", exist_ok=True)
if not os.path.exists(PROCESSED_FILE):
    with open(PROCESSED_FILE, "w") as f:
        pass

# === Ghi log ra file + in terminal ===
def log(msg, error=False):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}\n"
    with open(ERROR_LOG if error else HISTORY_LOG, "a") as f:
        f.write(line)
    print(line, end="")

# === ƒê·ªçc danh s√°ch post_id ƒë√£ x·ª≠ l√Ω ƒë·ªÉ tr√°nh l·∫∑p l·∫°i ===
def get_processed_ids():
    with open(PROCESSED_FILE) as f:
        return set(line.strip() for line in f if line.strip())

# === L∆∞u th√™m post_id m·ªõi v√†o log ===
def save_processed_id(pid):
    with open(PROCESSED_FILE, "a") as f:
        f.write(pid + "\n")

# === L·∫•y tham s·ªë trong cookies.txt
def parse_cookie_string(cookie_str):
    cookies = {}
    for part in cookie_str.strip().split(";"):
        if "=" in part:
            k, v = part.strip().split("=", 1)
            cookies[k] = v
    return cookies

# === C√†o post t·ª´ fanpage (1 page g·∫ßn nh·∫•t), l·ªçc ra post c√≥ video ===
def detect_video_posts(page_name, cookies_param):
    print(f"[DEBUG] page name: {page_name}")
    try:
        # N·∫øu cookies_param l√† path ƒë·∫øn file
        if os.path.exists(cookies_param):
            with open(cookies_param) as f:
                raw_cookie = f.read().strip()
        else:
            raw_cookie = cookies_param

        # Parse th√†nh dict
        cookie_dict = parse_cookie_string(raw_cookie)

        # print("[DEBUG] cookie_dict =", cookie_dict)

        posts = get_posts(page_name, cookies=cookie_dict, pages=3)

        found = []

        # üß™ Inject video test (gi·∫£ l·∫≠p 1 post video m·ªõi ch∆∞a t·ª´ng c√≥)
        '''
        if page_name == "tiemcaphecu":
            found.append((
                f"FAKE_{int(time.time())}",  # post_id gi·∫£, random theo timestamp
                None, 
                "https://www.facebook.com/tiemcaphecu/videos/961861465851955"
            ))
            
        '''
        for post in posts:
            print("[DEBUG]", post.get("post_id"), post.get("video_id"), post.get("post_url"))
            if post.get("video") or post.get("video_id"):
                found.append((post["post_id"], post.get("video_id"), post.get("post_url")))
        return found

    except Exception as e:
        log(f"Error scraping {page_name}: {e}", error=True)
        return []


# === V√≤ng l·∫∑p ch√≠nh ===
def main_loop():
    log("[Watcher] B·∫Øt ƒë·∫ßu theo d√µi fanpage qua facebook-scraper")
    processed = get_processed_ids()

    while True:
        try:
            # ƒê·ªçc danh s√°ch page t·ª´ file
            with open(PAGES_FILE) as f:
                pages = [line.strip() for line in f if line.strip()]

            # V·ªõi m·ªói page: qu√©t post m·ªõi ‚Üí n·∫øu c√≥ video + ch∆∞a x·ª≠ l√Ω th√¨ g·ªçi downloader
            for page in pages:
                log(f"[Watcher]     ƒêang theo d√µi {page}")
                vids = detect_video_posts(page, COOKIE_FILE)
                for pid, vid, url in vids:
                    if pid not in processed:
                        log(f"[M·ªöI]         {page} ‚Äì {url or vid}")
                        subprocess.Popen(["python3", "fb_downloader.py", url or vid])
                        save_processed_id(pid)
                        processed.add(pid)

        except Exception as e:
            log(f"Unhandled error: {e}", error=True)

        time.sleep(CHECK_INTERVAL)

# === Ch·∫°y ===
if __name__ == "__main__":
    main_loop()
